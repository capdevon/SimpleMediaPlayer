plugins {
    id 'java-library'
    id 'application'
}

description = 'Simple Media Player for jMonkeyEngine'

// select one source-code (JDK) option:
sourceCompatibility = '1.8'
targetCompatibility = '1.8'

// select one version of the Engine:
ext.jmeVersion = '3.5.2-stable' // from mavenCentral

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) { // compile-time options:
        options.compilerArgs << '-Xdiags:verbose'
        options.compilerArgs << '-Xlint:unchecked'
        options.deprecation = true
        options.encoding = 'UTF-8'
    }
    tasks.withType(JavaExec) { // runtime options:
        args = []
        classpath sourceSets.main.runtimeClasspath
        //debug true
        enableAssertions true
        //jvmArgs '-verbose:gc'
        //jvmArgs '-Xbatch'
        //jvmArgs '-Xms512m', '-Xmx512m'
        //jvmArgs '-XX:+PrintCompilation'
        //jvmArgs '-XX:+UseConcMarkSweepGC'
        jvmArgs '-XX:+UseG1GC', '-XX:MaxGCPauseMillis=10'
    }
}

repositories {
    //mavenLocal()
    mavenCentral()
    maven { url 'https://jcenter.bintray.com/' }
    //maven { url 'http://nifty-gui.sourceforge.net/nifty-maven-repo' }
    //google()

    // Read more about repositories here:
    //   https://docs.gradle.org/current/userguide/dependency_management.html#sec:repositories
}

dependencies {
    // You can read more about how to add dependencies here:
    //   https://docs.gradle.org/current/userguide/dependency_management.html#sec:how_to_declare_your_dependencies

    // from mavenCentral (or mavenLocal) repositories:
    implementation 'org.jmonkeyengine:jme3-core:' + jmeVersion
    implementation 'org.jmonkeyengine:jme3-desktop:' + jmeVersion
    implementation 'org.jmonkeyengine:jme3-effects:' + jmeVersion
    //implementation 'org.jmonkeyengine:jme3-networking:' + jmeVersion
    //implementation 'org.jmonkeyengine:jme3-niftygui:' + jmeVersion
    //implementation 'org.jmonkeyengine:jme3-terrain:' + jmeVersion

    // select one version of LWJGL (from mavenCentral or mavenLocal)
    runtimeOnly 'org.jmonkeyengine:jme3-lwjgl:' + jmeVersion  // LWJGL 2.x
    //runtimeOnly 'org.jmonkeyengine:jme3-lwjgl3:' + jmeVersion // LWJGL 3.x

    // BasicGame doesn't use physics. If your game needs physics, select either:
    //    1. Minie
    //implementation 'com.github.stephengold:Minie:4.8.1'
    // OR
    //    2. jme3-jbullet
    //implementation 'org.jmonkeyengine:jme3-jbullet:' + jmeVersion

    // BasicGame doesn't use jme3-jogg or jme3-plugins
    //  -- they are included solely to avoid warnings from AssetConfig
    runtimeOnly 'org.jmonkeyengine:jme3-jogg:' + jmeVersion
    runtimeOnly 'org.jmonkeyengine:jme3-plugins:' + jmeVersion

    // libraries related to the Lemur GUI and Groovy:
    //implementation 'com.simsilica:lemur:1.15.0'
    //implementation 'com.simsilica:lemur-props:1.1.1'
    //implementation 'com.simsilica:lemur-proto:1.12.0'
    //runtimeOnly 'org.codehaus.groovy:groovy-jsr223:3.0.8'

    // other libraries:
    //implementation 'com.github.stephengold:Heart:7.1.0'
    //implementation 'com.simsilica:sim-math:1.4.1'
    //runtimeOnly 'org.jmonkeyengine:jme3-testdata:' + jmeVersion
}

// cleanup tasks
clean.dependsOn('cleanDLLs', 'cleanDyLibs', 'cleanLogs', 'cleanSOs')
task cleanDLLs(type: Delete) {
    delete fileTree(dir: '.', include: '*.dll')
}
task cleanDyLibs(type: Delete) {
    delete fileTree(dir: '.', include: '*.dylib')
}
task cleanLogs(type: Delete) {
    delete fileTree(dir: '.', include: 'hs_err_pid*.log')
}
task cleanSOs(type: Delete) {
    delete fileTree(dir: '.', include: '*.so')
}
